{ MODKEY,     XK_y,   incnmaster,     {.i = +1 } },
{ MODKEY,     XK_v,   incnmaster,     {.i = -1 } },

{ MODKEY,     XK_bracketright, view,    {.ui = ~0 } },
{ MODKEY|ShiftMask, XK_bracketright, tag,   {.ui = ~0 } },
{ MODKEY,     XK_r,   spawn,    {.v = (const char*[]){ TERMINAL, "-e", "lfub", NULL } } },
{ MODKEY|ShiftMask, XK_r,   spawn,    {.v = (const char*[]){ TERMINAL, "-e", "htop", NULL } } },
{ MODKEY|ShiftMask, XK_colon, spawn,    {.v = (const char*[]){ "passmenu", NULL } } },
{ MODKEY,     XK_d,     spawn,    SHCMD("xdotool type $(grep -v '^#' ~/.local/share/larbs/snippets | dmenu -i -l 50 | cut -d' ' -f1)") },

{ MODKEY,     XK_Page_Up, shiftview,  { .i = -1 } },
{ MODKEY|ShiftMask, XK_Page_Up, shifttag, { .i = -1 } },
{ MODKEY,     XK_Page_Down, shiftview,  { .i = +1 } },
{ MODKEY|ShiftMask, XK_Page_Down, shifttag, { .i = +1 } },

{ MODKEY,     XK_F1,    spawn,    SHCMD("groff -mom /usr/local/share/dwm/larbs.mom -Tpdf | zathura -") },
{ MODKEY,     XK_F2,    spawn,    {.v = (const char*[]){ "tutorialvids", NULL } } },
{ MODKEY,     XK_F3,    spawn,    {.v = (const char*[]){ "displayselect", NULL } } },
{ MODKEY,     XK_F4,    spawn,    SHCMD(TERMINAL " -e pulsemixer; kill -44 $(pidof dwmblocks)") },
{ MODKEY,     XK_F5,    xrdb,   {.v = NULL } },
{ MODKEY,     XK_F6,    spawn,    {.v = (const char*[]){ "torwrap", NULL } } },
{ MODKEY,     XK_F7,    spawn,    {.v = (const char*[]){ "td-toggle", NULL } } },
{ MODKEY,     XK_F8,    spawn,    {.v = (const char*[]){ "mailsync", NULL } } },
{ MODKEY,     XK_F9,    spawn,    {.v = (const char*[]){ "mounter", NULL } } },
{ MODKEY,     XK_F10,   spawn,    {.v = (const char*[]){ "unmounter", NULL } } },
{ MODKEY,     XK_F11,   spawn,    SHCMD("mpv --untimed --no-cache --no-osc --no-input-default-bindings --profile=low-latency --input-conf=/dev/null --title=webcam $(ls /dev/video[0,2,4,6,8] | tail -n 1)") },
{ MODKEY,     XK_F12,   spawn,    SHCMD("remaps") },

{ 0,            XK_Print, spawn,    SHCMD("maim pic-full-$(date '+%y%m%d-%H%M-%S').png") },
{ ShiftMask,    XK_Print, spawn,    {.v = (const char*[]){ "maimpick", NULL } } },
{ MODKEY,       XK_Print, spawn,    {.v = (const char*[]){ "dmenurecord", NULL } } },
{ MODKEY|ShiftMask, XK_Print, spawn,    {.v = (const char*[]){ "dmenurecord", "kill", NULL } } },
{ MODKEY,     XK_Delete,  spawn,    {.v = (const char*[]){ "dmenurecord", "kill", NULL } } },
{ MODKEY,     XK_Scroll_Lock, spawn,    SHCMD("killall screenkey || screenkey &") },

{ 0, XF86XK_AudioMicMute,     spawn,    SHCMD("pactl set-source-mute @DEFAULT_SOURCE@ toggle") },


{ 0, XF86XK_AudioNext,        spawn,    {.v = (const char*[]){ "mpc",  "next", NULL } } },
{ 0, XF86XK_AudioPause,       spawn,    {.v = (const char*[]){ "mpc", "pause", NULL } } },
{ 0, XF86XK_AudioPlay,        spawn,    {.v = (const char*[]){ "mpc", "play", NULL } } },
{ 0, XF86XK_AudioStop,        spawn,    {.v = (const char*[]){ "mpc", "stop", NULL } } },
{ 0, XF86XK_AudioRewind,      spawn,    {.v = (const char*[]){ "mpc", "seek", "-10", NULL } } },
{ 0, XF86XK_AudioForward,     spawn,    {.v = (const char*[]){ "mpc", "seek", "+10", NULL } } },
{ 0, XF86XK_AudioMedia,       spawn,    {.v = (const char*[]){ TERMINAL, "-e", "ncmpcpp", NULL } } },
    /* { 0, XF86XK_PowerOff,    spawn,    {.v = (const char*[]){ "sysact", NULL } } }, */

// synclient in extra/xf86-input-synaptics
{ 0, XF86XK_Launch1,        spawn,    {.v = (const char*[]){ "xset", "dpms", "force", "off", NULL } } },
{ 0, XF86XK_TouchpadToggle,     spawn,    SHCMD("(synclient | grep 'TouchpadOff.*1' && synclient TouchpadOff=0) || synclient TouchpadOff=1") },
{ 0, XF86XK_TouchpadOff,      spawn,    {.v = (const char*[]){ "synclient", "TouchpadOff=1", NULL } } },
{ 0, XF86XK_TouchpadOn,       spawn,    {.v = (const char*[]){ "synclient", "TouchpadOff=0", NULL } } },



{ MODKEY,     XK_e,   spawn,    SHCMD(TERMINAL " -e neomutt ; pkill -RTMIN+12 dwmblocks; rmdir ~/.abook") },
